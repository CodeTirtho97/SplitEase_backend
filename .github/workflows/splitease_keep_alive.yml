name: 🚀 Keep SplitEase Backend Alive

on:
  schedule:
    # Run every 59 minutes to prevent Render cold starts
    - cron: '*/59 * * * *'
    # Run daily health check at 6 AM UTC
    - cron: '0 6 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      ping_type:
        description: 'Type of ping to perform'
        required: true
        default: 'backend_ping'
        type: choice
        options:
          - backend_ping
          - health_check
          - emergency_revival

# Set environment variables
env:
  BACKEND_URL: ${{ secrets.BACKEND_URL }}  # Your Render backend URL

jobs:
  # Job 1: Keep Render Backend Alive (Prevent Cold Starts)
  keep-backend-alive:
    name: 🔥 Keep Backend Warm
    runs-on: ubuntu-latest
    
    # Run for scheduled events and manual backend ping triggers
    if: |
      github.event_name == 'schedule' || 
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.ping_type == 'backend_ping')
    
    steps:
      - name: 🏓 Ping Backend Server
        run: |
          echo "🚀 Pinging backend to keep it alive..."
          
          # Try multiple endpoints that should exist in your backend
          endpoints=(
            "/"
            "/api/stats"
          )
          
          success_count=0
          total_endpoints=${#endpoints[@]}
          
          for endpoint in "${endpoints[@]}"; do
            echo "📡 Pinging: $BACKEND_URL$endpoint"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 30 \
              --retry 3 \
              --retry-delay 5 \
              "$BACKEND_URL$endpoint" || echo "000")
            
            if [[ "$response" =~ ^[2-4][0-9][0-9]$ ]]; then
              echo "✅ Success: $endpoint responded with HTTP $response"
              ((success_count++))
            else
              echo "⚠️ Warning: $endpoint responded with HTTP $response"
            fi
            
            # Small delay between requests
            sleep 2
          done
          
          echo "🎉 Backend ping completed!"
          echo "📊 Success rate: $success_count/$total_endpoints endpoints responded successfully"
          
          # If at least one endpoint succeeds, consider it successful
          if [ $success_count -gt 0 ]; then
            echo "✅ Backend is alive and responding!"
          else
            echo "❌ All endpoints failed - backend may be down"
            exit 1
          fi

      - name: 📊 Log Backend Status
        run: |
          echo "📈 Backend Keep-Alive Summary:"
          echo "⏰ Timestamp: $(date -u)"
          echo "🌐 Backend URL: $BACKEND_URL"
          echo "🔄 Ping Type: Scheduled Backend Keep-Alive"
          echo "⏭️ Next ping in 10 minutes"

  # Job 2: Daily Health Check
  daily-health-check:
    name: 🏥 Daily Health Check
    runs-on: ubuntu-latest
    
    # Run on daily schedule and manual health check triggers
    if: |
      (github.event_name == 'schedule' && contains(github.event.schedule, '0 6')) || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.ping_type == 'health_check')
    
    steps:
      - name: 🏥 Comprehensive Backend Health Check
        run: |
          echo "🏥 Running comprehensive health check..."
          
          # Health check endpoints that should exist
          health_endpoints=(
            "/"
            "/api/stats"
          )
          
          failed_checks=0
          total_checks=0
          
          for endpoint in "${health_endpoints[@]}"; do
            ((total_checks++))
            echo "🔍 Checking: $BACKEND_URL$endpoint"
            
            start_time=$(date +%s)
            response=$(curl -s -w "%{http_code}" \
              --max-time 30 \
              "$BACKEND_URL$endpoint" || echo "000")
            end_time=$(date +%s)
            
            response_time=$((end_time - start_time))
            
            if [[ "$response" =~ ^[2-4][0-9][0-9]$ ]]; then
              echo "✅ PASS: $endpoint (${response_time}s, HTTP $response)"
            else
              echo "❌ FAIL: $endpoint (${response_time}s, HTTP $response)"
              ((failed_checks++))
            fi
          done
          
          echo ""
          echo "📊 Health Check Summary:"
          echo "✅ Passed: $((total_checks - failed_checks))/$total_checks"
          echo "❌ Failed: $failed_checks/$total_checks"
          
          if [ $failed_checks -eq $total_checks ]; then
            echo "🚨 All health checks failed - backend appears to be down!"
            exit 1
          elif [ $failed_checks -gt 0 ]; then
            echo "⚠️ Some health checks failed but backend is partially responsive"
          else
            echo "🎉 All health checks passed!"
          fi

      - name: 📈 Performance Metrics
        run: |
          echo "📈 Collecting performance metrics..."
          
          # Test response times for main endpoint
          response_times=()
          
          for i in {1..3}; do
            start_time=$(date +%s%3N)
            response=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/api/stats" || echo "000")
            end_time=$(date +%s%3N)
            response_time=$((end_time - start_time))
            
            if [[ "$response" =~ ^[2-4][0-9][0-9]$ ]]; then
              echo "🕐 Response time (attempt $i): ${response_time}ms - HTTP $response"
              response_times+=($response_time)
            else
              echo "❌ Failed response (attempt $i): HTTP $response"
            fi
            
            sleep 1
          done
          
          # Calculate average response time if we have successful responses
          if [ ${#response_times[@]} -gt 0 ]; then
            total=0
            for time in "${response_times[@]}"; do
              total=$((total + time))
            done
            average=$((total / ${#response_times[@]}))
            echo "📊 Average response time: ${average}ms"
          fi

      - name: 📧 Health Report Summary
        run: |
          echo "📋 Daily Health Report - $(date -u)"
          echo "🌐 Backend URL: $BACKEND_URL"
          echo "🔄 Keep-alive status: Active"
          echo "⏰ Next check: $(date -u -d '+1 day')"
          echo "🚀 System status: Operational"

  # Job 3: Emergency Revival (Manual only)
  emergency-revival:
    name: 🚨 Emergency Service Revival
    runs-on: ubuntu-latest
    
    # Only run on manual trigger with emergency option
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.ping_type == 'emergency_revival'
    
    steps:
      - name: 🚨 Emergency Revival Protocol
        run: |
          echo "🚨 Executing emergency revival protocol..."
          
          revival_attempts=0
          max_attempts=5
          success=false
          
          while [ $revival_attempts -lt $max_attempts ] && [ "$success" = false ]; do
            ((revival_attempts++))
            echo "🔄 Revival attempt $revival_attempts/$max_attempts..."
            
            # Try main endpoint first
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              --max-time 60 \
              --retry 3 \
              --retry-delay 10 \
              "$BACKEND_URL/" || echo "000")
            
            if [[ "$response" =~ ^[2-4][0-9][0-9]$ ]]; then
              echo "✅ Revival successful! Backend responded with HTTP $response"
              success=true
            else
              echo "❌ Attempt $revival_attempts failed (HTTP $response)"
              if [ $revival_attempts -lt $max_attempts ]; then
                echo "⏳ Waiting 30 seconds before next attempt..."
                sleep 30
              fi
            fi
          done
          
          if [ "$success" = true ]; then
            echo "🎉 Emergency revival completed successfully!"
          else
            echo "🚨 Emergency revival failed after $max_attempts attempts"
            exit 1
          fi
